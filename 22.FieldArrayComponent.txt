                                                    22.Field Array Component

Field Array Component uses the render props method and gives the choice to the user to add n number of phone number.

step to implement Field Array Component :-
    1.Import the FieldArray from formik.
    2.add the initial Values array.
    3.add the jsx
        FieldArray Component takes name props, value to the initial value.
        Takes function as it child and return the jsx.
    
EXAMPLE :-
    1.import { FieldArray } from 'formik'
    2.   const initialValues = {
                    name : '',
                    email : '',
                    channel : '',
                    Social : {
                        twitter : '',
                        faceBook : ''
                    },
                    phoneNumber : ['',''],
                    phNumbers : [''], ////////step 2
        }
    3.<FieldArray name='phNumbers'>
        {
            fieldArrayProps =>{
                console.log('fieldArrayProps', fieldArrayProps)
                console.log(push, remove, form) = fieldArrayProps
                const { values } = form
                const { phNumbers } = values
                return (
                    {
                        phNumbers.map((number, index) =>(
                            <div key={index}>
                                <Field name={`phNumbers[${index]`}/>
                                {
                                    index > 0 && (
                                        <button type='button' onClick={() => remove(index)}>
                                        {''} -{''}</button>
                                    )
                                }
                                <button type='button' onClick={() => push('')}>
                                        {''} +{''}</button>
                            </div>
                        ))
                    }
                )
            }
        }
    </FieldArray>



///////////////////////////////////////////////////////////////////////////////////////

In YOUTUBE.js

import React from 'react';
import { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik' //importing

    const YouTubeForm = () =>{

        const initialValues = {
            name : '',
            email : '',
            channel : '',
            Social : {
                twitter : '',
                faceBook : ''
            },
            phoneNumber : ['',''],
            phNumbers
        }

        const onSubmit = values =>{
            console.log('form data', values) // log the values of the field at the time of SUBMISSION 
        }

/////////const validate = values => {
                    let errors = {}

                    if(!values.name){
                        errors.name = 'required'
                    }

                    if(!values.email){
                        errors.email = 'required'
                    }else if(RegEx.test(values.email)){
                        errors.email = 'INVALID format'
                    }

                    if(!values.channel){
                        errors.channel = 'required'
                    }

                    return errors
            }/////////////////////////////////////////////////////////////// Commenting out

            const ValidationSchema = Yup.object({
                name : Yup.string().required('Required'),
                email : Yup.string().email('Invalid format').required('Required'),
                channel : Yup.string().required('Required'),               
            })

            console.log('Field Visited', formik.touched) // IF WE CLICKED IN THE FILED BOX AND CLICKED OUT THE FILED BOX
                                                                        IT DISPLAYS true, OTHERWISE IT DISPLAYS FALSE
        return(
            <Formik 
                initialValues={initialValues}
                onSubmit={onSubmit}
                ValidationSchema={ValidationSchema}
                >
                <Form>
                    <label htmlFor='name'>Name</label>
                    <Field type='text' id='name' name='name' 
                    />
                    <ErrorMessage name='name'/>



                    <label htmlFor='email'>Name</label>
                    <Field type='text' id='email' name='email' placeholder='Email'/> //////// additional props
                    <ErrorMessage name='email' component={TextError}>


                    <label htmlFor='channel'>Name</label>
                    <Field type='text' id='channel' name='channel' 
                    />
                    <ErrorMessage name='channel'>
                        {
                            errormsg => <div className='error'>{errormsg}</div>
                        }
                    </ErrorMessage>
                    
                    <label htmlFor='comment'>Comments</label>
                    <Field as='textarea' id='comment' name='comment'/> ///////// as props


                    <label htmlForm='address'>Address</label>  ///////////Render Props method
                    <Field name='address'>
                        {
                            props => {
                                const {field, form, meta} = props;
                                console.log('render Props', props);
                                return <div>
                                        <input id='address' type='text' {...field}/>
                                        {meta.touched && meta.error ? <div>{meta.error}</div> : null}
                                        </div>
                            }
                        }
                    </Field>
                    
                    
                    <label htmlFor='twitter'>twitter</label>
                    <Field type='text' id='twitter' name='Social.twitter' />


                    <label htmlFor='facebook'>faceBook</label>
                    <Field type='text' id='facebook' name='Social.faceBook' />

                    
                    <label htmlFor='primary'>PrimaryNumber</label>
                    <Field type='text' id='primary' name='phoneNumber[0}' />


                    <label htmlFor='secondary'>secondary Number</label>
                    <Field type='text' id='secondary' name='phoneNumber[1]' />

                    <FieldArray name='phNumbers'>
                            {
                                fieldArrayProps =>{
                                    console.log('fieldArrayProps', fieldArrayProps)
                                    console.log(push, remove, form) = fieldArrayProps
                                    const { values } = form
                                    const { phNumbers } = values
                                    return (
                                        {
                                            phNumbers.map((number, index) =>(
                                                <div key={index}>
                                                    <Field name={`phNumbers[${index]`}/>
                                                    {
                                                        index > 0 && (
                                                            <button type='button' onClick={() => remove(index)}>
                                                            {''} -{''}</button>
                                                        )
                                                    }
                                                    <button type='button' onClick={() => push('')}>
                                                            {''} +{''}</button>
                                                </div>
                                            ))
                                        }
                                    )
                                }
                            }
                    </FieldArray>

                    <button type='submit' className='btn'>submit</button>
                </Form>
            </Formik>
        )
    }


