                                            20.NESTED OBJECT

NESTED OBJECT :-
        -> In some case we have to grp the some date from the form.
eg :
    we have to group the twitter and faceBook data in Social obj.


/////////////////////////////////////////////////////////////////////////////
To Do that :-
    Add the Social Obj in the InitialValue Obj
    And the twitter and faceBook Field component with name prop with value of Social.twitter and Social.faceBook respectively.

eg :-
    const initialValues = {
            name : '',
            email : '',
            channel : '',
            Social : {
                twitter : '',
                faceBook : ''
            }
        }

    <label htmlFor='twitter'>twitter</label>
    <Field type='text' id='twitter' name='Social.twitter' />
    <label htmlFor='facebook'>faceBook</label>
    <Field type='text' id='facebook' name='Social.faceBook' />

///////////////////////////////////////////////////////////////////////////////////////

In YOUTUBE.js

import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik' //importing

    const YouTubeForm = () =>{

        const initialValues = {
            name : '',
            email : '',
            channel : '',
            Social : {
                twitter : '',
                faceBook : ''
            }
        }

        const onSubmit = values =>{
            console.log('form data', values) // log the values of the field at the time of SUBMISSION 
        }

/////////const validate = values => {
                    let errors = {}

                    if(!values.name){
                        errors.name = 'required'
                    }

                    if(!values.email){
                        errors.email = 'required'
                    }else if(RegEx.test(values.email)){
                        errors.email = 'INVALID format'
                    }

                    if(!values.channel){
                        errors.channel = 'required'
                    }

                    return errors
            }/////////////////////////////////////////////////////////////// Commenting out

            const ValidationSchema = Yup.object({
                name : Yup.string().required('Required'),
                email : Yup.string().email('Invalid format').required('Required'),
                channel : Yup.string().required('Required'),               
            })

            console.log('Field Visited', formik.touched) // IF WE CLICKED IN THE FILED BOX AND CLICKED OUT THE FILED BOX
                                                                        IT DISPLAYS true, OTHERWISE IT DISPLAYS FALSE
        return(
            <Formik 
                initialValues={initialValues}
                onSubmit={onSubmit}
                ValidationSchema={ValidationSchema}
                >
                <Form>
                    <label htmlFor='name'>Name</label>
                    <Field type='text' id='name' name='name' 
                    />
                    <ErrorMessage name='name'/>



                    <label htmlFor='email'>Name</label>
                    <Field type='text' id='email' name='email' placeholder='Email'/> //////// additional props
                    <ErrorMessage name='email' component={TextError}>


                    <label htmlFor='channel'>Name</label>
                    <Field type='text' id='channel' name='channel' 
                    />
                    <ErrorMessage name='channel'>
                        {
                            errormsg => <div className='error'>{errormsg}</div>
                        }
                    </ErrorMessage>
                    
                    <label htmlFor='comment'>Comments</label>
                    <Field as='textarea' id='comment' name='comment'/> ///////// as props


                    <label htmlForm='address'>Address</label>  ///////////Render Props method
                    <Field name='address'>
                        {
                            props => {
                                const {field, form, meta} = props;
                                console.log('render Props', props);
                                return <div>
                                        <input id='address' type='text' {...field}/>
                                        {meta.touched && meta.error ? <div>{meta.error}</div> : null}
                                        </div>
                            }
                        }
                    </Field>
                    
                    
                    <label htmlFor='twitter'>twitter</label>
                    <Field type='text' id='twitter' name='Social.twitter' />


                    <label htmlFor='facebook'>faceBook</label>
                    <Field type='text' id='facebook' name='Social.faceBook' />

                    <button type='submit' className='btn'>submit</button>
                </Form>
            </Formik>
        )
    }

